include 'lib/hash'
include 'lib/list'
include 'lib/math'

composer parsePosition
  { (<'<x='>) x: <"1">, (<', y='>) y: <"1">, (<', z='>) z: <"1"> (<'>'>) }
end parsePosition

def moonsAtStart: [$IN::lines -> parsePosition -> { position: $, velocity: {dx: 0"1", dy: 0"1", dz: 0"1"} }];

templates absSum
  @: 0;
  $... -> $::value -> math/abs -> @: $@ + $;
  $@ !
end absSum

templates step
  def moons: $;
  $ -> \updateVelocity[i](
      @: $;
      $moons... -> { ddx: ([$.position.x, $@.position.x] -> list/naturalOrder)"1",
        ddy: ([$.position.y, $@.position.y] -> list/naturalOrder)"1",
        ddz: ([$.position.z, $@.position.z] -> list/naturalOrder)"1" }
      -> @.velocity: { dx: $@.velocity.dx + $.ddx,
        dy: $@.velocity.dy + $.ddy,
        dz: $@.velocity.dz + $.ddz};
      $@ !
    \updateVelocity)
  -> \updatePosition[i](
      { position: { x: $.position.x + $.velocity.dx,
          y: $.position.y + $.velocity.dy,
          z: $.position.z + $.velocity.dz },
        velocity: $.velocity } !
    \updatePosition) !
end step

templates moonTime&{increase:}
  @: $;
  1..$increase ->  @: $@ -> step;
  $@ !
end moonTime

// part 1
def moonsAt1000: $moonsAtStart -> moonTime&{increase: 1000};
[ $moonsAt1000... -> [ $.position -> absSum, $.velocity -> absSum ] -> $(1) * $(2) ] -> list/sum -> !OUT::write

'
' -> !OUT::write

// part 2
templates findHalfCycles
  @: { rx: 0"t", ry: 0"t", rz: 0"t", time: 1"t"};
  $moonsAtStart -> step -> #
  when <[<{velocity: <{dx: <=0>}>}>+ VOID] ?($@.rx <=0"t">)> do
    @.rx: $@.time;
    $ -> #
  when <[<{velocity: <{dy: <=0>}>}>+ VOID] ?($@.ry <=0"t">)> do
    @.ry: $@.time;
    $ -> #
  when <[<{velocity: <{dz: <=0>}>}>+ VOID] ?($@.rz <=0"t">)> do
    @.rz: $@.time;
    $ -> #
  when <?($@ <{rx: <~=0"t">, ry: <~=0"t">, rz: <~=0"t">}>)> do
    $@!
  when <> do
    @.time: $@.time + 1;
    $ -> step -> #
end findHalfCycles

def halfCycles: $moonsAtStart -> findHalfCycles;

templates factorize
  @: [$(1)];
  $(2..last)... -> \newFactor(
    @: $;
    @factorize: $@factorize -> \[i](
      def this: $;
      $math/gcd&{a: $, b:$@newFactor} -> #
      when <=1> do $this !
      when <=$this> do $ ! @newFactor: $@newFactor ~/ $;
      when <> do $ ! $this ~/ $ ! @newFactor: $@newFactor ~/ $;
    \);
    ..|@factorize: $@;
  \newFactor) -> !VOID
  $@!
end factorize

[$halfCycles... -> \(<~?($::key <='time'>)> $::value -> $::raw !\)]
-> factorize
-> list/product -> 2 * $
-> !OUT::write

