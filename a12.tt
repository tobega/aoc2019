import 'lib/hash'
import 'lib/list'
import 'lib/math'

composer parsePosition
  { (<'<x='>) x: <INT>, (<', y='>) y: <INT>, (<', z='>) z: <INT> (<'>'>) }
end parsePosition

def moonsAtStart: [$IN::lines -> parsePosition -> { position: $, velocity: {dx: 0, dy: 0, dz: 0} }];

templates absSum
  @: 0;
  $... -> $::value -> math/abs -> @: $@ + $;
  $@ !
end absSum

templates step
  def moons: $;
  $ -> \updateVelocity[i](
      @: $;
      $moons... -> { ddx: [$.position.x, $@.position.x] -> list/naturalOrder,
        ddy: [$.position.y, $@.position.y] -> list/naturalOrder,
        ddz: [$.position.z, $@.position.z] -> list/naturalOrder }
      -> @.velocity: { dx: $@.velocity.dx + $.ddx,
        dy: $@.velocity.dy + $.ddy,
        dz: $@.velocity.dz + $.ddz};
      $@ !
    \updateVelocity)
  -> \updatePosition[i](
      { position: { x: $.position.x + $.velocity.dx,
          y: $.position.y + $.velocity.dy,
          z: $.position.z + $.velocity.dz },
        velocity: $.velocity } !
    \updatePosition) !
end step

templates moonTime@{increase:}
  @: $;
  1..$increase ->  @: $@ -> step;
  $@ !
end moonTime

// part 1
def moonsAt1000: $moonsAtStart -> moonTime@{increase: 1000};
[ $moonsAt1000... -> [ $.position -> absSum, $.velocity -> absSum ] -> $(1) * $(2) ] -> list/sum -> !OUT::write

'
' -> !OUT::write

// part 2
templates findHalfCycles
  @: { rx: 0, ry: 0, rz: 0, time: 1};
  $moonsAtStart -> step -> #
  <~[<{velocity: <{dx: <~=0>}>}>] |?($@.rx <~=0>)>
    @.rx: $@.time;
    $ -> #
  <~[<{velocity: <{dy: <~=0>}>}>] |?($@.ry <~=0>)>
    @.ry: $@.time;
    $ -> #
  <~[<{velocity: <{dz: <~=0>}>}>] |?($@.rz <~=0>)>
    @.rz: $@.time;
    $ -> #
  <?($@ <{rx: <~=0>, ry: <~=0>, rz: <~=0>}>)>
    $@!
  <>
    @.time: $@.time + 1;
    $ -> step -> #
end findHalfCycles

def halfCycles: $moonsAtStart -> findHalfCycles;

templates factorize
  @: [$(1)];
  $(2..last)... -> \newFactor(
    @: $;
    @factorize: $@factorize -> \[i](
      def this: $;
      {a: $, b:$@newFactor} -> math/gcd -> #
      <=1> $this !
      <> $ ! $this ~/ $ ! @newFactor: $@newFactor ~/ $;
    \);
    ..|@factorize: $@;
  \newFactor) -> !VOID
  $@!
end factorize

[$halfCycles... -> \(<~?($::key <='time'>)> $::value !\)]
-> factorize
-> list/product -> 2 * $
-> !OUT::write

