include 'lib/math'
include 'lib/hash'
include 'lib/list'

data dx <"x">, dy <"y">, sin <"y/r">, cos<"x/r">

def map: 1"y":[ $IN::lines -> 1"x":[ $... ] ];

source maxAsteroidsDetectable
  @: { asteroidCount: 0"1" };
  $map -> \location[j; i](
    <='#'>
      @: 0"1";
      def linesOfSight: [] -> hash/Set;
      $map -> \eachAsteroid[y; x](
           when <='#'?([$i,$j] <~=[$x,$y]>)> do
               { dx: ($x-$i)"x", dy: ($y-$j)"y" } -> \(
                  when <{dx: <=0"x">, dy: <0"y"..>}> do { dx: 0"x", dy: 1"y"} !
                  when <{dx: <0"x"..>, dy: <=0"y">}> do { dx: 1"x", dy: 0"y"} !
                  when <{dx: <=0"x">}> do { dx: 0"x", dy: -1"y"} !
                  when <{dy: <=0"y">}> do { dx: -1"x", dy: 0"y"} !
                  when <> do
                   def gcd: $math/gcd&{a: ($.dx)"1", b: ($.dy)"1"};
                   { dx: $.dx ~/ $gcd, dy: $.dy ~/ $gcd } !
               \) -> linesOfSight::add -> @location: ($@location + $)"1";
       \eachAsteroid) -> !VOID
      $@ -> \(when <$@maxAsteroidsDetectable.asteroidCount..> do @maxAsteroidsDetectable: { asteroidCount: $, x: ($i)"x", y: ($j)"y" }; \) -> !VOID
    \location) -> !VOID
  $@ !
end maxAsteroidsDetectable

def station: $maxAsteroidsDetectable;
$station -> !OUT::write
'
' -> !OUT::write

//stereotype scannedPosition: <{direction: {quadrant:<1..4>, sin:<integer>, cos:<integer>}, hops: <integer>}>
templates processScan
  templates quadrant
    when <{dy: <..~0"y">, dx: <0"x"..>}> do 1 !
    when <{dy: <0"y"..>, dx: <0"x"~..>}> do 2 !
    when <{dy: <0"y"~..>, dx: <..0"x">}> do 3 !
    when <{dy: <..0"y">, dx: <..~0"x">}> do 4 !
  end quadrant
  def q: $ -> quadrant;
  def gcd: $math/gcd&{a: ($.dx)"1", b: ($.dy)"1"};
  { direction: { quadrant: $q,
      sin: ($ -> \(when <?($q <=1|=3>)> do $.dx ! when <> do $.dy !\) -> $ ~/ $gcd -> math/abs)"y/r",
      cos: ($ -> \(when <?($q <=2|=4>)> do $.dx ! when <> do $.dy !\) -> $ ~/ $gcd -> math/abs)"x/r"},
    hops: $gcd } !
end processScan

templates scanOrder
  when <?($(1).direction.quadrant <~=$(2).direction.quadrant>)> do
    $(1).direction.quadrant::raw - $(2).direction.quadrant::raw !

  when <?(($(1).direction.sin * $(2).direction.cos)"x y/r2" <~=($(2).direction.sin * $(1).direction.cos)"x y/r2">)> do
    ($(1).direction.sin * $(2).direction.cos)"x y/r2" - ($(2).direction.sin * $(1).direction.cos)"x y/r2" -> $::raw !

  when <> do $(1).hops::raw - $(2).hops::raw !
end scanOrder

templates get200thShot
  @: { asteroids: $(2..last), shot: 1"1", lastShot: $(1) };
  1 -> #
  when <?($@.shot <=200"1">)> do $@.lastShot !

  when <$@.asteroids::length~..> do
    @.lastShot: ^@.asteroids(1);
    @.shot: $@.shot + 1"1";
    1 -> #

  when <?($@.asteroids($).direction <=$@.lastShot.direction>)> do $ + 1 -> #

  otherwise
    @.lastShot: ^@.asteroids($);
    @.shot: $@.shot + 1"1";
    $ -> #
end get200thShot

$map -> \scanAsteroids[y; x](
     when <='#'?([($x)"x",($y)"y"] <~=[$station.x,$station.y]>)> do
         { dx: ($x-$station.x)"x", dy: ($y-$station.y)"y" } -> processScan
         -> { $..., x: ($x)"x", y: ($y)"y" } !
 \scanAsteroids) -> list/flatten -> list/sort&{comparator: scanOrder}
 -> get200thShot -> (($.x - 1) * 100 + ($.y - 1))"1" -> !OUT::write
