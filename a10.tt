import 'lib/math'
import 'lib/hash'
import 'lib/list'

def map: [ $IN::lines -> [ $... ] ];

source maxAsteroidsDetectable
  @: { asteroids: 0 };
  $map -> \location[j; i](
    <='#'>
      @: 0;
      def linesOfSight: [] -> hash/Set;
      $map -> \eachAsteroid[y; x](
           when <='#'?([$i,$j] <~=[$x,$y]>)> do
               { dx: $x-$i, dy: $y-$j } -> \(
                  when <{dx: <=0>, dy: <0..>}> do { dx: 0, dy: 1} !
                  when <{dx: <0..>, dy: <=0>}> do { dx: 1, dy: 0} !
                  when <{dx: <=0>}> do { dx: 0, dy: -1} !
                  when <{dy: <=0>}> do { dx: -1, dy: 0} !
                  when <> do
                   def gcd: {a: $.dx, b: $.dy} -> math/gcd;
                   { dx: $.dx ~/ $gcd, dy: $.dy ~/ $gcd } !
               \) -> linesOfSight::add -> @location: $@location + $;
       \eachAsteroid) -> !VOID
       $@ -> \(when <$@maxAsteroidsDetectable.asteroids..> do @maxAsteroidsDetectable: { asteroids: $, x: $i, y: $j }; \) -> !VOID
  \location) -> !VOID
  $@ !
end maxAsteroidsDetectable

def station: $maxAsteroidsDetectable;
$station -> !OUT::write
'
' -> !OUT::write

//stereotype scannedPosition: <{direction: {quadrant:<1..4>, sin:<integer>, cos:<integer>}, hops: <integer>}>
templates processScan
  templates quadrant
    when <{dy: <..~0>, dx: <0..>}> do 1 !
    when <{dy: <0..>, dx: <0~..>}> do 2 !
    when <{dy: <0~..>, dx: <..0>}> do 3 !
    when <{dy: <..0>, dx: <..~0>}> do 4 !
  end quadrant
  def q: $ -> quadrant;
  def gcd: {a: $.dx, b: $.dy} -> math/gcd;
  { direction: { quadrant: $q,
      sin: $ -> \(when <?($q <=1|=3>)> do $.dx ! when <> do $.dy !\) -> $ ~/ $gcd -> math/abs,
      cos: $ -> \(when <?($q <=2|=4>)> do $.dx ! when <> do $.dy !\) -> $ ~/ $gcd -> math/abs},
    hops: $gcd } !
end processScan

templates scanOrder
  when <?($(1).direction.quadrant <~=$(2).direction.quadrant>)> do
    $(1).direction.quadrant - $(2).direction.quadrant !

  when <?($(1).direction.sin * $(2).direction.cos <~=$(2).direction.sin * $(1).direction.cos>)> do
    $(1).direction.sin * $(2).direction.cos - $(2).direction.sin * $(1).direction.cos !

  when <> do $(1).hops - $(2).hops !
end scanOrder

templates get200thShot
  @: { asteroids: $(2..last), shot: 1, lastShot: $(1) };
  1 -> #
  when <?($@.shot <=200>)> do $@.lastShot !

  when <$@.asteroids::length~..> do
    @.lastShot: ^@.asteroids(1);
    @.shot: $@.shot + 1;
    1 -> #

  when <?($@.asteroids($).direction <=$@.lastShot.direction>)> do $ + 1 -> #

  when <> do
    @.lastShot: ^@.asteroids($);
    @.shot: $@.shot + 1;
    $ -> #
end get200thShot

$map -> \scanAsteroids[y; x](
     when <='#'?([$x,$y] <~=[$station.x,$station.y]>)> do
         { dx: $x-$station.x, dy: $y-$station.y } -> processScan
         -> { $..., x: $x, y: $y } !
 \scanAsteroids) -> list/flatten -> list/sort@{comparator: scanOrder}
 -> get200thShot -> ($.x - 1) * 100 + ($.y - 1) -> !OUT::write
