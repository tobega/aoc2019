composer toInt
  <INT>
end toInt

templates valid(pw)
  digits = ['$pw;'... -> toInt ];
  diffs = digits.map(a[i] -> { match <?(i match <2..>)>: emit a[i] - digits[i - 1] });
  diffs.map(diff -> { match <[<0>]>: emit diff}).map(diff -> { match <~[<..~0>]>: emit diff }).map(diff -> emit pw)
end valid

//part 1
validPasswords = [ 284639..748759 -> valid ];
validPasswords.map(a -> a::length).map(l -> OUT::write)

'
' -> !OUT::write

// part 2
templates runLengths(in)
  breaks = [ in.map(a[i] -> { match <?(i match <=1>)>: emit 1 match <~?(in[i] match <in[i - 1]>)>: emit i })..., in::length + 1];
  breaks.map(a[i] -> { match <?(i match <2..>)>: emit a[i] - breaks[i - 1] }).map(runs -> emit runs)
end runLengths

[ $validPasswords... .map(pw) -> {
  [ '$pw;'... ].map(digits -> runLengths).map(runs -> { match <[<=2>]>: emit pw }).map(valid -> emit valid)
} ] .map(a -> a::length).map(l -> OUT::write)
