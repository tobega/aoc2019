include 'aoc'
include 'lib/combinatorics'
include 'lib/list'

def amplifierControllerSoftware: $IN::lines -> aoc/parseIntcode;

templates thrusters
  @: $;
  0 -> #
  when <?($@ <=[]>)> do $ !
  when <> do def val: $; $amplifierControllerSoftware -> aoc/compute@{inputs: [^@(1), $val]} -> #
end thrusters

def valueSet: [ 0..4 ];

[ $valueSet::length -> combinatorics/lexicalPermutations -> $valueSet($) -> thrusters ] -> list/max -> !OUT::write
'
' -> !OUT::write

templates feedbackMachines
  @: [1..$::length -> $amplifierControllerSoftware -> aoc/MarkII@{cooperativeThreading: 0} ];
  $ -> \[i]($ -> @feedbackMachines($i)::proceed ! \) -> \(when <~[](0)> do 'WTF! $;' ! \) -> !OUT::write
  { out: 0, to: 1 } -> #

  when <{status: <='end'>, to: <=1>}> do $.out !

  when <{out: <>, to: <>}> do
    def stage: $;
    $stage -> $.out -> @($stage.to)::proceed -> { $..., to: $stage.to mod $@::length + 1 } -> #

  when <> do
    'Error $;' -> !OUT::write
end feedbackMachines

def feedbackPhases: [ 5..9 ];
[ $feedbackPhases::length -> combinatorics/lexicalPermutations -> $feedbackPhases($) -> feedbackMachines ] -> list/max -> !OUT::write
