include 'lib/hash'

data key <>
data value <>

composer parseReaction
  { ingredients: [ <ingredient>+ ], (<' => '>) result: <chemical> }
  rule chemical: { amount: <INT>, (<WS>) name: <~'[\s,]'> }
  rule ingredient: <chemical> (<', '>?)
end parseReaction

def reactionMap: [ $IN::lines -> parseReaction -> { key: $.result.name, value: $ } ] -> hash/Map;

templates convertToIngredients&{stock:, need:}
      when <~'ORE'> do
        def reaction: $ -> reactionMap::get;
        def amountNeeded: $ -> need::remove;
        def reactionsNeeded: ($amountNeeded + $reaction.result.amount - 1) ~/ $reaction.result.amount;
        $reaction.ingredients... ->
        \calculateNeed(def ingredient: $;
          def available: [ $ingredient.name -> stock::remove ] -> \(when <=[]> do 0 ! when <> do $(1) !\);
          $available - $ingredient.amount * $reactionsNeeded ->
          \storeOrProcure(
            when <0~..> do { key: $ingredient.name, value: $ } -> stock::put -> !VOID
            when <..~0> do
              def deficit: -$;
              { key: $ingredient.name, value: $deficit }
              -> need::put // continues with old entry if one existed
              -> { key: $.key, value: $.value + $deficit }
              -> need::put -> !VOID
          \storeOrProcure) -> !VOID
        \calculateNeed) -> !VOID
        { key: $, value: $reactionsNeeded * $reaction.result.amount - $amountNeeded } -> stock::put -> !VOID
end convertToIngredients

templates calculateOreForFuel&{stock:}
  def need: [{ key: 'FUEL', value: $ }] -> hash/Map;
  [$need::entries -> $.key] -> #

  when <=['ORE']> do 'ORE' -> need::get !

  otherwise $... -> convertToIngredients&{stock: $stock, need: $need } -> !VOID
    [$need::entries -> $.key] -> #
end calculateOreForFuel

// part 1
def oreForOneFuel: 1 -> calculateOreForFuel&{stock: [] -> hash/Map};
'$oreForOneFuel;
' -> !OUT::write

// part 2
source calculateFuelFromTrillion
  def trillion: 1000000000000;
  def stock: [] -> hash/Map;
  @: 0;
  $trillion -> #
  $@ !

  when <$oreForOneFuel..> do
    def remaining: $;
    def fuelToMake: $ ~/ $oreForOneFuel;
    @: $@ + $fuelToMake;
    $fuelToMake -> calculateOreForFuel&{stock: $stock} -> $remaining - $ -> #

  otherwise
    def remaining: $;
    1 -> calculateOreForFuel&{stock: $stock} ->
      \(when <..$remaining> do @calculateFuelFromTrillion: $@calculateFuelFromTrillion + 1; $remaining - $ ! \) -> #
end calculateFuelFromTrillion

$calculateFuelFromTrillion -> !OUT::write
