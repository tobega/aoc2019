import 'lib/hash'
import 'lib/list'

def map: [ $IN::lines -> [ $... ]];

def start: $map -> \[i;j](<='@'> { row: $i, col: $j } !\) ... ...;

def keyPositions: [ $map -> \[i;j](<'\p{Lower}'> { key: $, row: $i, col: $j } !\) ... ...];

def keys: [ $keyPositions... ->  $.key ];

def doors: [ $map -> \[i;j](<'\p{Upper}'> $ !\) ... ...];

templates calculateDistances
  def directions: [ { dRow: 0, dCol: -1}, { dRow: 0, dCol: 1}, { dRow: -1, dCol: 0}, { dRow: 1, dCol: 0}];
  @: { map: $map, next: [], current: [{at: $, distance: 0, doors: [], others: []}], found: [] -> hash/Map};
  @.map($.row;$.col): '#';
  1 -> #
  $@.found !

  <?($@.current <[](1..)>)>
    def base: ^@.current(1);
    $directions...
      -> { at: { row: $base.at.row + $.dRow, col: $base.at.col + $.dCol},
           distance: $base.distance + 1, doors: $base.doors,
           others: $base.others}
      -> \isValid(
         <?($@calculateDistances.map($.at.row; $.at.col) <~='#'>)>
           $! \isValid)
      -> \checkDoor( def onMap: $@calculateDistances.map($.at.row; $.at.col);
         $ -> #
         <?($doors <[<=$onMap>]>)> { $..., doors: [$.doors..., $onMap] } !
         <?($keys <[<=$onMap>]>)> { $..., others: [$.others..., $onMap] } !
         <> $!
      \checkDoor)
      -> \propagate(
          ..|@calculateDistances.next: $;
          $ ! \propagate)
      -> \update( def onMap: $@calculateDistances.map($.at.row; $.at.col);
        $ -> #
        <?($keys <[<=$onMap>]>)>
          { key: $onMap, value: {distance: $.distance, doors: $.doors, others: $.others}}
          // re-putting the first (shortest) path, if one exists
          -> @calculateDistances.found::put -> @calculateDistances.found::put -> !VOID
        <>
          @calculateDistances.map($.at.row; $.at.col): '#';
        \update)
      -> !VOID
    1 -> #
  <?($@.next <[](1..)>)>
    @.current: $@.next;
    @.next: [];
    1 -> #
end calculateDistances

processor DistanceTable
  @: [] -> hash/Map;

  sink add@{from:}
    def entry: { key: { from: $from, to : $.key}, value: $.value};
    $entry -> @DistanceTable::put -> 'Error: duplicate key for $;$#10;' -> !OUT::write
  end add

  templates pathLength
    def path: $;
    @: {at: '@', length: 0};
    1..$path::length -> #
    $@.length !

    <> def i: $;
      {from: $@.at, to: $path($i)} -> @DistanceTable::get
      -> \distance( @: $.distance;
        $.doors... -> \(<?($path(1..$i) <~[<'(?i)$;'>]>)>
           @distance: $@distance + 1000; \) -> !VOID
        $.others... -> \(<?($path(1..$i) <~[<'(?i)$;'>]>)>
           @distance: $@distance + 1000; \) -> !VOID
        $@! \distance)
      -> @.length: $@.length + $;
      @.at: $path($i);
  end pathLength

  source entries
    $@DistanceTable::entries!
  end entries
end DistanceTable

def distanceTable: $DistanceTable;

$start -> calculateDistances -> $::entries -> !distanceTable::add@{from: '@'}
$keyPositions... -> \( def from: $.key;
  $ -> calculateDistances -> $::entries -> !distanceTable::add@{from: $from}
\) -> !VOID

templates shuffle
  @: $;
  [ 1..$::length -> \($@shuffle::length -> SYS::randomInt -> ^@shuffle($+1) !\) ] !
end shuffle

source geneSoup@{popSize:, genes:}
  source createCell
    def values: [ $... -> distanceTable::pathLength ];
    $ -> \[i](<?($values($i) <..$@geneSoup.best>)> @geneSoup.best: $values($i); @geneSoup.bestGene: $;\) -> !VOID
    { age: 0, chromosome: $, value: $values -> list/min} !
  end createCell

  templates getGamete
    def which: 2 -> SYS::randomInt;
    def crossover: $genes::length + 1 -> SYS::randomInt;
    @: $.chromosome(1 + $which; 1..$crossover);
    $.chromosome(2 - $which)... -> \(<?($@getGamete <~[<=$>]>)> ..|@getGamete: $;\) -> !VOID
    $@ !
  end getGamete

  templates mate
    @: { adults: $, babies: []};
    1 -> #
    $@.babies!

    <?($@.adults <[](2..)>)>
      def pair: [ 1..2 ->
        \($@mate.adults::length -> SYS::randomInt -> ^@mate.adults($+1) ! \)];
      1..4 -> [ $pair...  -> getGamete] -> createCell -> ..|@.babies: $;
      1 -> #
  end mate

  sink updateBest
    <..~$@geneSoup.best> @geneSoup.best: $;
  end updateBest

  source isStagnated
    @: 0;
    [1..3 -> $@geneSoup.pop::length -> SYS::randomInt -> $@geneSoup.pop($+1).value ] -> #
    $@!
    
    // check if all equal, actually it is not an array containing anything different than best
    <~[<~=$@geneSoup.best>]> @: 1;
      'Stagnated at $(1);$#10;' -> !OUT::write
  end isStagnated

  templates mutate
        @: $;
        1..2 -> 50 -> SYS::randomInt -> \(<=0> $!\)
        -> $genes::length -> SYS::randomInt -> $+1
        -> { a: $ -> SYS::randomInt -> $+1, b: $, which: 2 -> SYS::randomInt -> $+1 }
        -> @.chromosome($.which): [$@.chromosome($.which;1..$.a-1), $@.chromosome($.which;$.a..$.b-1), $@.chromosome($.which;$.b..-1)] -> shuffle -> list/flatten;
        1..5 -> 20 -> SYS::randomInt -> \(<=0> $!\)
        -> { which: 2 -> SYS::randomInt -> $+1,
          a: $genes::length -> SYS::randomInt -> $+1,
          b: $genes::length -> SYS::randomInt -> $+1
        } -> @.chromosome($.which; [$.a,$.b]): $@.chromosome($.which; [$.b, $.a])...;
        $@!
  end mutate

  templates ageAndMutate
    @: $;
    @.age: $@.age+1;
    8 -> SYS::randomInt -> #

    <..$@.age> !VOID // died
    <> $ -> mutate !
  end ageAndMutate

  sink enterPop
    {tries: 5, candidate: $} -> #
    <?($@geneSoup.pop::length <..~$popSize>)> ..|@geneSoup.pop: $.candidate;
    <{tries: <1..>}> def toReplace: $@geneSoup.pop::length -> SYS::randomInt -> $+1;
      $ -> \(<{candidate:<{value: <..$@geneSoup.pop($toReplace).value>}>}> @geneSoup.pop($toReplace): $.candidate -> mutate;
        <> { tries: $.tries-1, candidate: $.candidate} ! \) -> #
  end enterPop

  @: {best: 99999999999, bestGene:[]};
  @.pop: [ 1..$popSize -> [ $genes -> shuffle, $genes -> shuffle ] -> createCell ];
  0 -> #

  <=1> [$@.best, $@.bestGene] !
  <>
    def babies: $@.pop -> mate;
    $babies... -> $.value -> !updateBest
'best $:[$@.best, $@.bestGene];$#10;' -> !OUT::write
    @.pop: [$@.pop ... -> ageAndMutate ];
    $babies... -> !enterPop
    $isStagnated -> #
end geneSoup

// part 1
'The best path is $geneSoup@{popSize: 500, genes:$keys};
' -> !OUT::write
