package hash

processor Set
  source values
    $@Set... ... !
  end values
  templates add
    def val: $;
    def ind: $::hashCode -> $ mod $@Set::length + 1;
    $ -> #
    <?($@Set($ind) <[<$>]>)> 0 ! // Already exists
    <?($@Set($ind) <[](32)>)> // rehash
      def old: $@Set;
      @Set: [1..$old::length*2 -> []];
      $old... ... -> add -> !VOID
      $ -> add !
    <>
      ..|@Set($ind): $;
      1 !
  end add
  @:[1..32 -> []];
  $... -> add -> !VOID
end Set

processor Map
  source entries
    $@Map... ... !
  end entries
  templates get
    def key: $;
    def ind: $::hashCode -> $ mod $@Map::length + 1;
    $@Map($ind)... -> #
    <{key: <$key>}> $.value !
  end get
  templates put
    def val: $;
    def ind: $.key::hashCode -> $ mod $@Map::length + 1;
    $@Map($ind) -> #
    <[](32)> // rehash
      def old: $@Map;
      @Map: [1..$old::length*2 -> []];
      $old... ... -> put -> !VOID
      $val -> put !
    <>
      $ -> [i](<{key: <$val.key>}> ^@Map($ind;$i) !)... !
      ..|@Map($ind): $val;
  end put
  @:[1..32 -> []];
  $... -> put -> !VOID
end Map
