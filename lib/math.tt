templates abs
  <?($::raw <0..>)> $ !
  <> -$ !
end abs

templates sign
  <=0*$> 0 !
  <0*$..> 1 !
  <..0*$> -1 !
end sign

templates manhattanDistance
  @: 0;
  $ -> #
  $@ !
  when <[]> do $... -> #
  when <{}> do $... -> $::value -> #
  when <.. ?($::raw <0..>)> do @: $@ + $::raw;
  when <.. ?($::raw <..0>)> do @: $@ - $::raw;
end manhattanDistance

source gcd&{a:, b:}
  data a <"1">, b <"1"> local
  { a: $a -> abs, b: $b -> abs } -> #
  <{a: <=0"1">}> $.b::raw !
  <{b: <=0"1">}> $.a::raw !
  <{a:<=1"1">}|{b:<=1"1">}> 1 !
  <{a:<..$.b>, b:<>}> { a: $.a, b: $.b mod $.a } -> #
  <{a:<>, b:<>}> { a: $.b, b: $.a mod $.b } -> #
end gcd

source extendedGcd&{a:, b:}
  data x <"1">, y <"1">, gcd <"1"> local
  $a -> #
  <=0"1"> { x: 0"1", y: 1"1", gcd: $b } !
  <> def q: $b ~/ $a;
    $extendedGcd&{ a: $b - $q * $a, b: $a } -> { x: $.y - $q * $.x, y: $.x, gcd: $.gcd } !
end extendedGcd

test 'extended gcd'
  assert  $extendedGcd&{a: 11"1", b: 26"1"} -> $.x * 11 + $.y * 26 <=1"1"> 'should be 1'

  assert $extendedGcd&{a: 5"1", b: 11"1"} -> $.x mod 11 <=9"1"> 'should be 9'
end 'extended gcd'

operator (m mulMod&{mod:} n)
  data result <"1">, b <"1"> local
  @: { result: 0"1", b: $m mod $mod };
  $n mod $mod -> #
  <=0"1"> $@.result !
  <>
    $ -> \(<?($ mod 2 <=1"1">)> @mulMod.result: ($@mulMod.result + $@mulMod.b) mod $mod;\) -> !VOID
    @.b: $@.b * 2 mod $mod;
    $ ~/ 2 -> #
end mulMod

operator (m powerMod&{mod:} n)
  data result <"1">, b <"1"> local
  @: { result: 1"1", b: $m };
  $n mod ($mod - 1"1") -> #
  <=0"1"> $@.result !
  <>
    $ -> \(<?($ mod 2 <=1"1">)> @powerMod.result: ($@powerMod.result mulMod&{mod:$mod} $@powerMod.b);\) -> !VOID
    @.b: ($@.b mulMod&{mod:$mod} $@.b);
    $ ~/ 2 -> #
end powerMod

test 'power modulo'
  assert (5"1" powerMod&{mod: 11"1"} 10"1") <=1"1"> 'should be 1'

  assert (5"1" powerMod&{mod: 11"1"} 6"1") <=5"1"> 'should be 5'
end 'power modulo'