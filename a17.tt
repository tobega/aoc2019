include 'aoc'
include 'lib/list'

data row <"r">, col <"c">, dr <"r">, dc <"c">

def asciiProgram: $IN::lines -> aoc/parseIntcode;

templates collectAsciiRows
  @: [[]];
  $... -> #
  $@ -> \(<?($(last) <[](0)>)> $(1..last-1) -> # <> $(last)::length -> !OUT::write $ !\) !
  <=10> ..|@: [];
  <..27> $ -> 'Got ascii $;$#10;' -> !OUT::write
  <> ..|@(last): '$#$;';
end collectAsciiRows

//part 1
def viewProd: $asciiProgram -> aoc/run -> collectAsciiRows;

def viewTest: '#######...#####
#.....#...#...#
#.....#...#...#
......#...#...#
......#...###.#
......#.....#.#
^########...#.#
......#.#...#.#
......#########
........#...#..
....#########..
....#...#......
....#...#......
....#...#......
....#####......
'-> $::asCodePoints -> collectAsciiRows;

def view: $viewProd;

'
$view... -> '$;
';
' -> !OUT::write

$view -> \[row;col](
  $ -> \(<~='.'> $!\) ->
  // using a little trick where getting a range of one element just gives an empty list if it doesn't exist
  [ $view($row-1..$row-1;$col)..., $view($row+1..$row+1;$col)...,
    $view($row;$col-1..$col-1)..., $view($row;$col+1..$col+1)... ]
  -> [ $... -> \(<~='.'> 1 !\) ] -> list/sum -> \(<3..> $ !\)
  -> ($row-1)*($col-1) ! \) -> list/flatten -> list/sum -> !OUT::write

'

' -> !OUT::write

// part 2
def vacuumbot: $view -> \[row;col](
   <='^'> { row: ($row)"r", col: ($col)"c", dr: -1"r", dc: 0"c"} !
   <='<'> { row: ($row)"r", col: ($col)"c", dr: 0"r", dc: -1"c"} !
   <='v'> { row: ($row)"r", col: ($col)"c", dr: 1"r", dc: 0"c"} !
   <='>'> { row: ($row)"r", col: ($col)"c", dr: 0"r", dc: 1"c"} !
\)... ...;

// start with simplest, ignoring alternative paths at intersections
templates buildPath
  @: {path: [], move: 0"1"};
  $ -> #
  <?($view($.row+$.dr..$.row+$.dr; $.col+$.dc..$.col+$.dc) <=[['#']]>)>
    @.move: $@.move+1;
    { $..., row: $.row+$.dr, col: $.col+$.dc } -> #
  <?($view($.row+($.dc)"r"..$.row+($.dc)"r"; $.col-($.dr)"c"..$.col-($.dr)"c") <=[['#']]>)>
    $@.move -> \(<1..> $!\) -> ..|@.path: '$;';
    @.move: 0;
    ..|@.path: 'R';
    { $..., dr: ($.dc)"r", dc: (-$.dr)"c" } -> #
  <?($view($.row-($.dc)"r"..$.row-($.dc)"r"; $.col+($.dr)"c"..$.col+($.dr)"c") <=[['#']]>)>
    $@.move -> \(<1..> $!\) -> ..|@.path: '$;';
    @.move: 0;
    ..|@.path: 'L';
    { $..., dr: (-$.dc)"r", dc: ($.dr)"c" } -> #
  <> //done
    $@.move -> \(<1..> $!\) -> ..|@.path: '$;';
    $@.path !
end buildPath

def path: $vacuumbot -> buildPath -> \[i]($... ! ',' !\);

source createProgram
  templates factor
    def sizes: $;
    @: { main: [], subs: [] };
    1 -> #
    <=0> {} !
    <?($@.main::length <11..>)> {} !
    <=$path::length+1> $@ !
    <> $ -> \extend( def at: $;
        1 -> #
        <$sizes::length~..> 0 !
        <?($@factor.subs::length <=$-1>)?($at+$sizes($)-1 <..$path::length>)>
          ..|@factor.subs: $path($at..~$at+$sizes($));
          ..|@factor.main: $;
          $at + $sizes($)  -> \(<?($path($-1) <','>)> $! <> 0! \) !
        <?($@factor.subs::length <$..>)?($path($at..~$at+$@factor.subs($)::length) <=$@factor.subs($)>)>
          ..|@factor.main: $;
          $at+$@factor.subs($)::length !
        <> $+1 -> #
      \extend) -> #
  end factor

  @: [1,1,1];
  $@ -> factor -> #
  <{main:<>}> $!
  <>
    1 -> \(<$@createProgram::length~..> 'No program found$#10;' -> !OUT::write
        <?($@createProgram($) <..20>)> @createProgram($): $@createProgram($) + 1; 1!
        <> @createProgram($): 1; $+1 -> #\)
      -> $@ -> factor -> #
end createProgram

def program: $createProgram;
def symbols: ['ABC'...];
def main: $symbols($program.main) -> \[i]($! ',' !\) -> $(1..last-1);

def sourceCode: '$main...;
$program.subs... -> '$(1..last-1)...;
';';

'$sourceCode;
' -> !OUT::write

def input: '$sourceCode;n
' -> $::asCodePoints;

[2, $asciiProgram(2..last)...] -> aoc/compute&{inputs: $input}
-> \(<0..> $!\) -> !OUT::write
