include 'aoc'
include 'lib/hash'

def botInterface: $IN::lines -> aoc/parseIntcode;

def directions: moveÂ´1:[ { move: 1, dX: 0"x", dY: -1"y"},
  { move: 2, dX: 0"x", dY: 1"y"},
  { move: 3, dX: -1"x", dY: 0"y"},
  { move: 4, dX: 1"x", dY: 0"y"}];

// Returns the shortest path to the target, or, when failed, the maximum number of steps possible
  templates findClosest&{map:, from:}
    data visited <"y":[<"x":[<=0|=1>* VOID]>* VOID]> local
    def target: $;
    @:{ next:[], current:[{ position: $from, path: [] }], found: [],
      visited: $map -> \[i;j](0!\),
      steps: 0"1"
    };
    1 -> #
    when <?($@.found <[](1..)>)> do $@.found !
    when <?($@.current <[](1..)>)> do
      def base: ^@.current(1);
      $directions...
        -> { position: { x: $base.position.x + $.dX, y: $base.position.y + $.dY},
             path: [$base.path..., $.move]}
        -> \inBounds(when <?($.position.y <$map::first..$map::last>)
                      ?($.position.x <$map(first)::first..$map(first)::last>)> do $ ! \inBounds)
        -> \canMove(when <?($map($.position.y; $.position.x)
                <=$target>)> do @findClosest.found: $.path;
             when <?($map($.position.y; $.position.x) <~='#'>)
               ?($@findClosest.visited($.position.y; $.position.x)
                 <=0>)> do $ ! \canMove)
        -> \store(..|@findClosest.next: $;
             @findClosest.visited($.position.y; $.position.x): 1;\store)
        -> !VOID
      1 -> #
    when <?($@.next <[](1..)>)> do
      @.current: $@.next;
      @.next: [];
      @.steps: $@.steps + 1"1";
      1 -> #
    otherwise $@.steps !
  end findClosest

data coordinates <{ x: <"x">, y: <"y"> }>
data corridorMap <{map: <[](1.. //;1..
  )>, bot: <coordinates>, oxygenSystem: <={}|coordinates>}>

templates botExplore&{mode:}
  sink extendMapX
    when <=$@botExplore.map(first)::first> do
      @botExplore.map: $@botExplore.map -> \[i](($@botExplore.map(first)::first - 1"x"):['?', $...]!\);
    when <=$@botExplore.map(first)::last> do
    $@botExplore.map::first..$@botExplore.map::last -> ..|@botExplore.map($): '?';
  end extendMapX
  sink extendMapY
    when <=$@botExplore.map::first> do
      @botExplore.map: ($@botExplore.map::first - 1"y"):[$@botExplore.map(first) -> \[i]('?' !\), $@botExplore.map...];
    when <=$@botExplore.map::last> do
      ..|@botExplore.map: $@botExplore.map(first)::first:[1..$@botExplore.map(first)::length -> '?'];
  end extendMapY

// Will follow currentPath if it exists, else find a new target.
// Returns nothing if a target cannot be found, which causes the bot to return a prompt '>'
// which then exits botExplore
  source getNextMove
    1 -> #
    $@botExplore.currentPath -> \(<[](1..)> $(1)! \) !

    when <?($@botExplore.currentPath <[](1..)>)> do !VOID
    when <?($@botExplore.oxygenSystem <=$@botExplore.bot>) ?($mode <='find'>)> do
      // find a potential shortest path back to bot start
      'B' -> findClosest&{map: $@botExplore.map, from: $@botExplore.bot}
          -> ..|@botExplore: {solution: $, currentPath: $};
    when <?($@botExplore.oxygenSystem <{x:<>}>) ?($mode <='find'>)> do
      // go back to oxygen system and find a new shortest path
      'O' -> findClosest&{map: $@botExplore.map, from: $@botExplore.bot} -> @botExplore.currentPath: $;
    otherwise
      // Just find the closest unexplored square
      '?' -> findClosest&{map: $@botExplore.map, from: $@botExplore.bot}
        -> \(<[]> $! \) -> @botExplore.currentPath: $;
  end getNextMove

  @: { map: -1"y":[-1"x":['?', '?', '?'], -1"x":['?', 'B', '?'], -1"x":['?', '?', '?']],
    oxygenSystem: {},
    $..., // overwrites previous if given
    bot: { x: 0"x", y: 0"y"},
    currentPath: []
  };
  def bot: $botInterface -> aoc/MarkII&{cooperativeThreading: 1};
  [$getNextMove -> ($::raw)"1"] -> bot::proceed -> #

  when <{out: <=2"1">} ?($mode <='find'>)> do
    def move: $directions(^@.currentPath(1));
    @.bot.x: $@.bot.x + $move.dX;
    @.bot.y: $@.bot.y + $move.dY;
    @.map($@.bot.y; $@.bot.x): 'O';
    @.oxygenSystem: $@.bot;
    // Still extend for the next phase.
    $@.bot.x -> !extendMapX
    $@.bot.y -> !extendMapY
    [$getNextMove -> ($::raw)"1"] -> bot::proceed -> #
  when <{out: <=0"1">}> do
    def move: $directions(^@.currentPath(1));
    def mapX: $@.bot.x + $move.dX;
    def mapY: $@.bot.y + $move.dY;
    @.map($mapY; $mapX): '#';
    @.currentPath: [];
    [$getNextMove -> ($::raw)"1"] -> bot::proceed -> #
  when <{out: <=1"1"|=2"1">}> do
    def move: $directions(^@.currentPath(1));
    @.bot.x: $@.bot.x + $move.dX;
    @.bot.y: $@.bot.y + $move.dY;
    // Mark as open if previously unknown
    $@.map($@.bot.y; $@.bot.x) -> \(<='?'> $!\) -> @.map($@.bot.y; $@.bot.x): '.';
    $@.bot.x -> !extendMapX
    $@.bot.y -> !extendMapY
    $@.bot -> \moveIfNotDone(when <={x: 0"x", y: 0"y"}?($@botExplore.solution <>)> do 99 !
      otherwise [$getNextMove -> ($::raw)"1"] -> bot::proceed ! \moveIfNotDone) -> #
  otherwise
    $@ !
end botExplore

// part 1
def mapFoundOxygen: {} -> botExplore&{mode: 'find'};
$mapFoundOxygen -> $.solution::length -> !OUT::write
'
' -> !OUT::write
// part 2
def fullMap: $mapFoundOxygen -> botExplore&{mode: 'fill'};
'Z' -> findClosest&{map: $fullMap.map, from: $fullMap.oxygenSystem} -> !OUT::write
