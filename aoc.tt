package aoc

composer parseIntcode
  [ <code>+ ]
  rule code: <INT> (<','>?)
end parseIntcode

templates computer@{inputs:}
  templates opcode
    $@computer.memory($) mod 100 !
  end opcode
  templates params@{n:}
    templates modes
      @: $ ~/ 100;
      [ 1..$n -> ( $@modes mod 10 ! @modes: $@modes ~/ 10;) ] !
    end modes
    def base: $;
    $@computer.memory($) -> modes -> \[i](def val: $@computer.memory($base + $i);
      $ -> #
      <=0> $@computer.memory($val + 1) !
      <=1> $val !
    \) !
  end params
  @: { memory: $, input: $inputs };
  1 -> #

  <?($ -> opcode <=99>)>
    $@.memory(1) !

  <?($ -> opcode <=1>)>
    def params: $ -> params@{n: 2};
    def result: $@.memory($ + 3) + 1;
    @.memory($result): $params(1) + $params(2);
    $ + 4 -> #

  <?($ -> opcode <=2>)>
    def params: $ -> params@{n: 2};
    def result: $@.memory($ + 3) + 1;
    @.memory($result): $params(1) * $params(2);
    $ + 4 -> #

  <?($ -> opcode <=3>)>
    def result: $@.memory($ + 1) + 1;
    @.memory($result): ^@.input(1);
    $ + 2 -> #

  <?($ -> opcode <=4>)?($ + 2 -> opcode <=99>)>
    $ -> params@{n: 1} -> $(1) !

  <?($ -> opcode <=4>)?($ -> params@{n: 1} <=[0]>)>
    $ + 2 -> #

  <?($ -> opcode <=5>)>
    def params: $ -> params@{n: 2};
    $ + 3 -> \(<?($params(1) <~=0>)> $params(2) + 1 ! <> $ ! \) -> #

  <?($ -> opcode <=6>)>
    def params: $ -> params@{n: 2};
    $ + 3 -> \(<?($params(1) <=0>)> $params(2) + 1 ! <> $ ! \) -> #

  <?($ -> opcode <=7>)>
    def params: $ -> params@{n: 2};
    def result: $@.memory($ + 3) + 1;
    @.memory($result): $params(1) -> \(<..~$params(2)> 1 ! <> 0 !\);
    $ + 4 -> #

  <?($ -> opcode <=8>)>
    def params: $ -> params@{n: 2};
    def result: $@.memory($ + 3) + 1;
    @.memory($result): $params(1) -> \(<=$params(2)> 1 ! <> 0 !\);
    $ + 4 -> #

  <> 'Error! $; $ -> params@{n: 1}; $@.memory($-10..$+1);' !
end computer
